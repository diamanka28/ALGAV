class Hybrid_Node:
    """
    Classe représentant un nœud d'un HybridTrie avec une valeur entière.
    """

    def __init__(self, caractere='', valeur=None, inf=None, eq=None, sup=None):
        """
        Constructeur du nœud hybride.

        :param caractere: Le caractère contenu dans le nœud.
        :param valeur: La valeur entière associée si le nœud marque la fin d'un mot.
        :param inf: Le sous-arbre des caractères inférieurs.
        :param eq: Le sous-arbre des caractères égaux.
        :param sup: Le sous-arbre des caractères supérieurs.
        """
        if not (0 <= ord(caractere) <= 127):
            raise ValueError("Le caractère doit être ASCII.")
        if valeur is not None and not isinstance(valeur, int):
            raise ValueError("La valeur doit être un entier ou None.")
        
        self.caractere = caractere
        self.valeur = valeur
        self.inf = inf
        self.eq = eq
        self.sup = sup

    def is_key(self):
        """
        Vérifie si ce nœud marque la fin d'un mot (valeur non None).
        """
        return self.valeur is not None

    def make_key(self, valeur):
        """
        Marque ce nœud comme une clé en lui attribuant une valeur entière.
        """
        if not isinstance(valeur, int):
            raise ValueError("La valeur doit être un entier.")
        self.valeur = valeur

    def is_empty(self):
        """
        Vérifie si ce nœud est vide.
        """
        return self.caractere == '' and self.valeur is None and not self.inf and not self.eq and not self.sup

    def print_node(self):
        """
        Affiche les informations du nœud.
        """
        print(f"Caractère: {self.caractere}, Valeur: {self.valeur}")
        if self.inf:
            print(f"  Inf: {self.inf.caractere}")
        if self.eq:
            print(f"  Eq: {self.eq.caractere}")
        if self.sup:
            print(f"  Sup: {self.sup.caractere}")


class HybridTrie:
    """
    Classe représentant un arbre Hybride Trie avec des valeurs entières.
    """

    def __init__(self):
        self.root = None

    def est_vide(self):
        """
        Vérifie si l'arbre est vide.
        """
        return self.root is None or self.root.is_empty()

    def inserer(self, mot, valeur):
        """
        Insère un mot avec une valeur entière dans l'arbre.
        """
        def _inserer(node, mot, valeur):
            if not node:
                if len(mot) == 1:
                    return Hybrid_Node(mot[0], valeur)
                return Hybrid_Node(mot[0], None, None, _inserer(None, mot[1:], valeur), None)

            if mot[0] < node.caractere:
                node.inf = _inserer(node.inf, mot, valeur)
            elif mot[0] > node.caractere:
                node.sup = _inserer(node.sup, mot, valeur)
            else:
                if len(mot) == 1:
                    node.valeur = valeur
                else:
                    node.eq = _inserer(node.eq, mot[1:], valeur)
            return node

        self.root = _inserer(self.root, mot, valeur)

    def recherche(self, mot):
        """
        Recherche un mot dans l'arbre.
        """
        def _recherche(node, mot):
            if not node:
                return None
            if mot[0] < node.caractere:
                return _recherche(node.inf, mot)
            elif mot[0] > node.caractere:
                return _recherche(node.sup, mot)
            elif len(mot) == 1:
                return node.valeur
            else:
                return _recherche(node.eq, mot[1:])

        return _recherche(self.root, mot)

    def suppression(self, mot):
        """
        Supprime un mot de l'arbre.
        """
        def _suppression(node, mot):
            if not node:
                return None
            if mot[0] < node.caractere:
                node.inf = _suppression(node.inf, mot)
            elif mot[0] > node.caractere:
                node.sup = _suppression(node.sup, mot)
            elif len(mot) == 1:
                node.valeur = None
            else:
                node.eq = _suppression(node.eq, mot[1:])
            if not node.valeur and not node.inf and not node.eq and not node.sup:
                return None
            return node

        self.root = _suppression(self.root, mot)

    def comptage_mots(self):
        """
        Compte le nombre de mots dans l'arbre.
        """
        def _comptage_mots(node):
            if not node:
                return 0
            count = 1 if node.valeur is not None else 0
            count += _comptage_mots(node.inf)
            count += _comptage_mots(node.eq)
            count += _comptage_mots(node.sup)
            return count

        return _comptage_mots(self.root)

    def liste_mots(self, prefixe=""):
        """
        Liste les mots dans l'ordre alphabétique avec leurs valeurs.
        """
        def _liste_mots(node, prefixe):
            if not node:
                return []
            mots = []
            mots.extend(_liste_mots(node.inf, prefixe))
            if node.valeur is not None:
                mots.append((prefixe + node.caractere, node.valeur))
            mots.extend(_liste_mots(node.eq, prefixe + node.caractere))
            mots.extend(_liste_mots(node.sup, prefixe))
            return mots

        return _liste_mots(self.root, prefixe)

    def comptage_nil(self):
        """
        Compte le nombre de pointeurs vers Nil.
        """
        def _comptage_nil(node):
            if not node:
                return 1
            count = _comptage_nil(node.inf)
            count += _comptage_nil(node.eq)
            count += _comptage_nil(node.sup)
            return count

        return _comptage_nil(self.root)

    def hauteur(self):
        """
        Calcule la hauteur de l'arbre.
        """
        def _hauteur(node):
            if not node:
                return 0
            return 1 + max(_hauteur(node.inf), _hauteur(node.eq), _hauteur(node.sup))

        return _hauteur(self.root)

    def profondeur_moyenne(self):
        """
        Calcule la profondeur moyenne des feuilles.
        """
        def _profondeur_moyenne(node, profondeur):
            if not node:
                return 0, 0
            if not node.inf and not node.eq and not node.sup:
                return profondeur, 1
            total_profondeur, total_feuilles = 0, 0
            p, f = _profondeur_moyenne(node.inf, profondeur + 1)
            total_profondeur += p
            total_feuilles += f
            p, f = _profondeur_moyenne(node.eq, profondeur + 1)
            total_profondeur += p
            total_feuilles += f
            p, f = _profondeur_moyenne(node.sup, profondeur + 1)
            total_profondeur += p
            total_feuilles += f
            return total_profondeur, total_feuilles

        total_profondeur, total_feuilles = _profondeur_moyenne(self.root, 0)
        return total_profondeur / total_feuilles if total_feuilles else 0

    def prefixe(self, mot):
        """
        Compte combien de mots dans l'arbre ont le mot donné comme préfixe.
        """
        def _prefixe(node, mot):
            if not node:
                return 0
            if mot == "":
                return self.comptage_mots(node)
            if mot[0] < node.caractere:
                return _prefixe(node.inf, mot)
            elif mot[0] > node.caractere:
                return _prefixe(node.sup, mot)
            else:
                return _prefixe(node.eq, mot[1:])

        return _prefixe(self.root, mot)

tree = HybridTrie()
tree.inserer("mamad", 0)
print(tree.recherche("mamad"))
tree.inserer("serigne", 1)
tree.inserer("pense", 2)
tree.inserer("et", 3)
tree.inserer("mange", 4)

print(tree.liste_mots())
tree.root.inf.print_node()





