'''
Created on 11 déc. 2024

@author: diamanka

tous les tests se font ici
'''
from tree.patricia_tree import *
from _ast import Try
from pip._vendor.pyparsing.util import line
import json

def ajout(tree, fichier):
    """
    Ajoute tous les mots d'un fichier dans l'arbre Patricia.
    """
    
    if not isinstance(tree, PatriciaTree):
        raise TypeError("L'objet 'tree' doit etre un arbre de Patricia.")
        exit(1)
    try:
        with open(fichier, "r") as f:
            #traiter ligne par ligne
            for line in f:
                
                # diviser la ligne en mot 
                mots = line.strip().split()
                for mot in mots:
                    tree.insertion(mot) # ajouter le mot dans l'arbre
    except FileNotFoundError :
        print(f"Le fichier '{fichier}' n'a pas été trouvé.")
        exit(1)
    except Exception as e:
        print(f"Une erreur s'est produite 1 : {e}")
        exit(1)

def supprime(tree, fichier):
    """ supprime tous les mots du fichiers dans l'arbre
    """
    
    if not isinstance(tree, PatriciaTree):
        raise TypeError("L'objet 'tree' doit etre un arbre de patricia.")
        exit(1)
    try: 
        with open(fichier, "r") as f:
            for line in f:
                mots = line.strip().split()
                for mot in mots:
                    if not tree.suppression(mot):
                        print(mot + " pas supp")
    except FileNotFoundError:
        print(f"Le fichier '{fichier}' n'a pas été trouvé.")
        exit(1)
    except Exception as e:
        print(f"Une erreur s'est produite 2 : {e}")
        exit(1)

def node_to_dict(node):
    """
    Convertit un nœud Patricia en un dictionnaire compatible avec JSON.
    """
    if not node:
        return {}

    node_dict = {
        "label": not_key(node.key),
        "is_end_of_word": node.is_key(),
        "children": {}
    }
    # Ajouter les enfants récursivement
    child = node.child
    while child:
        first_char = child.key[0] if child.key else ""
        node_dict["children"][first_char] = node_to_dict(child)
        child = child.sibling

    return node_dict  
def patricia_to_json(tree, filename):
    """convertit l'arbre en json"""
    #conversion de l'arbre
    tree_dict = node_to_dict(tree.root)
    # Sauvegarder en JSON
    with open(filename, 'w') as f:
        json.dump(tree_dict, f, indent=4)
        
    print(f"Fichier JSON '{filename}' créé avec succès.")
   
def dict_to_node(dictionnaire):
    """
    convertit un dictionnaire en un noeud patricia
    """
    node= PatriciaNode(dictionnaire['label'])
    
    for cle, valeur in dictionnaire['children'].items():
        child = dict_to_node(valeur)
        if not node.child:
            node.child = child
        else:
            sibling = node.child
            while sibling.sibling:
                sibling = sibling.sibling
            sibling.sibling = child
    return node
        
def json_to_patricia(filename):
    """Construit l'arbre de patricia à partir du fichier json
    """
    tree = PatriciaTree()
    # récupérer le contenu du fichier dans un dictionnaire
    with open(filename, "r") as f:
        dictionaire = json.load(f)
    #appel sur laracine de l'arbre 
    tree.root = dict_to_node(dictionaire)
    return tree
    
    
"""tree = PatriciaTree()

ajout(tree, "exemple de base")

supprime(tree,"suppression.txt")

patricia_to_json(tree, "arbre")

tree.root.child.print_Node()
print(is_key('\x00'))
print(tree.recherche("des"))
"""
tree = json_to_patricia("arbre")
tree.root.child.print_Node()


