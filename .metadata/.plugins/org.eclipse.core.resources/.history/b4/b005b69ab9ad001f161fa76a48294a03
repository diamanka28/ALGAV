'''
Created on 27 nov. 2024
@author: diamanka
'''
from node.patricia_node import PatriciaNode
from utilitaire.patricia_util import *

class PatriciaTree(object):
    '''
    Cette classe représente l'arbre de patricia avec notre conception de représentation
    '''
    def __init__(self):
        '''
        initialise l'arbre de patricia avec une racine vide
        '''
        
        self.root = PatriciaNode()  # Point d'entrée de l'arbre 
        
    def insertion(self, word):
        """
        Insère un mot dans l'arbre Patricia.
        """
        current = self.root  # Commence à la racine
        #si le mot est vide
        if not word:
            return
        while current:
            
            diff = ord(head(word)) - ord(head(current.key))  # Comparer les premiers caractères
            
            if diff < 0:  # Le mot est "plus petit", insérer comme frère avant
                new_sibling = PatriciaNode(word)
                new_sibling.make_key()
                new_sibling.sibling = current.sibling
                current.sibling = new_sibling
                return
    
            elif diff > 0:  # Le mot est "plus grand", continuer dans les frères
                if not current.sibling:  # Pas de frère, ajouter directement
                    current.sibling = PatriciaNode(word)
                    current.sibling.make_key()
                    return
                current = current.sibling  # Continuer dans les frères
                continue
    
            else:  # Même premier caractère
                if current.key == word:# le meme mot
                    if not current.is_key():
                        current.make_key()
                        
                prefix = longest_prefix(current.key, word)
                if prefix == current.key:  # Le mot descend dans les enfants
                    remaining_word = rest(word, prefix)
                    if not current.child:  # Aucun enfant, créer un nouveau nœud
                        current.child = PatriciaNode(remaining_word)
                        current.child.make_key()
                        return
                    current = current.child  # Continuer dans les enfants
                    word = remaining_word  # Mise à jour du mot
                    continue
    
                elif prefix==word: # Le mot est un préfixe complet de la clé actuelle
                    remaining_node_key = rest(current.key, prefix)  # Partie restante de la clé actuelle
    
                    # Créer un nouveau parent pour le mot
                    new_parent = PatriciaNode(word)
                    new_parent.make_key()  # Le nouveau parent est terminal
                    new_parent.child = PatriciaNode(remaining_node_key)  # L'ancienne clé devient enfant
                    new_parent.child.child = current.child  # Réassigner les enfants existants
                    new_parent.child.sibling = current.sibling  # Réassigner les frères existants
    
                    # Réassigner le nouveau parent au nœud courant
                    current.key = new_parent.key
                    current.child = new_parent.child
                    current.sibling = new_parent.sibling
                    return
                        
                else:    # Préfixe partiel, division nécessaire
                    remaining_node_key = rest(current.key, prefix)  # Partie restante de la clé actuelle
                    remaining_word = rest(word, prefix)  # Partie restante du mot à insérer
    
                    # Créer le nouveau parent pour le préfixe
                    new_parent = PatriciaNode(prefix)
    
                    # Comparer les deux restes pour les organiser
                    if remaining_node_key < remaining_word:
                        new_parent.child = PatriciaNode(remaining_node_key)
                        new_parent.child.make_key()
                        new_parent.child.sibling = PatriciaNode(remaining_word)
                        new_parent.child.sibling.make_key()
                    else:
                        new_parent.child = PatriciaNode(remaining_word)
                        new_parent.child.make_key()
                        new_parent.child.sibling = PatriciaNode(remaining_node_key)
                        new_parent.child.sibling.make_key()
    
                    # Réassigner le nouveau parent au nœud courant
                    current.key = new_parent.key
                    current.child = new_parent.child
                    return
                
        # Si le nœud est vide, insérer directement
        current.key = word
        current.make_key()
        
        
        
word = "MAMADOU\x00"
word1 = "MAMADOU"

if rest(word, word1):
    print("YES")
else:
    print("NO")